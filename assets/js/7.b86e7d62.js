(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{358:function(s,t,a){s.exports=a.p+"assets/img/example.14b8c1f9.jpg"},359:function(s,t,a){s.exports=a.p+"assets/img/trie.8e4cbfa9.jpg"},381:function(s,t,a){"use strict";a.r(t);var n=a(42),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"프로그래머스-level04"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#프로그래머스-level04"}},[s._v("#")]),s._v(" 프로그래머스 Level04")]),s._v(" "),n("h2",{attrs:{id:"가사검색-trie-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#가사검색-trie-tree"}},[s._v("#")]),s._v(" 가사검색 - Trie, Tree")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://programmers.co.kr/learn/courses/30/lessons/60060",target:"_blank",rel:"noopener noreferrer"}},[s._v("문제 링크"),n("OutboundLink")],1),s._v(" "),n("a",{attrs:{href:"https://github.com/DKU-STUDY/Algorithm/blob/master/programmers/%EB%82%9C%EC%9D%B4%EB%8F%84%EB%B3%84/level04.%EA%B0%80%EC%82%AC_%EA%B2%80%EC%83%89/JeongShin.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("나의 풀이"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"_1-문제정의"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-문제정의"}},[s._v("#")]),s._v(" 1. 문제정의")]),s._v(" "),n("p",[s._v("아래와 같은 word 배열 내에서 queries 조건에 일치하는 문자의 개수를 구하여 배열로 반환하는 문제")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("words = [ frodo, front, frost, frozen, frame, kakao ]\nqueries = [ fro??, ????o, fr???, fro???, pro? ]\n\n이때,\nquery 👉 일치하는 문자를 예로들면\nfro?? 👉 frodo, front, frost\n????o 👉 frodo, kakao\nfr??? 👉 frodo, front, frost, frame\nfro??? 👉 frozen\npro? 👉\n")])])]),n("p",[s._v("와 같이 구할 수 있고 이에따라 [3, 2, 4, 1, 0] 을 반환해야 한다.")]),s._v(" "),n("h3",{attrs:{id:"_2-풀이-코드"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-풀이-코드"}},[s._v("#")]),s._v(" 2. 풀이 & 코드")]),s._v(" "),n("h4",{attrs:{id:"approach-1-linear-search"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#approach-1-linear-search"}},[s._v("#")]),s._v(" Approach 1. Linear Search")]),s._v(" "),n("p",[s._v("가장 처음 접근한 솔루션은 Regular Expression 을 이용한 선형 탐색구조이다.")]),s._v(" "),n("p",[s._v("이 접근 방법의 효율성을 따져보자.")]),s._v(" "),n("p",[s._v("예를들어 n 개의 문자열 집합 중에서 특정 문자열의 포함 여부를 알아내는데 linear search를 하게 되면 특정 문자열의 길이가 m이라 하면,")]),s._v(" "),n("blockquote",[n("p",[s._v("Linear Search : O ( n*m )")])]),s._v(" "),n("p",[s._v("정렬을 한뒤 binary seach 를 하게 되면,")]),s._v(" "),n("blockquote",[n("p",[s._v("Sorting & Binary Seach : O ( n*m*log n )")])]),s._v(" "),n("p",[s._v("의 시간이 든다.")]),s._v(" "),n("p",[s._v("이때 문자열을 효율적으로 검색하는 "),n("code",[s._v("Trie")]),s._v(" 자료구조를 사용하면")]),s._v(" "),n("blockquote",[n("p",[s._v("Trie : O ( m*log n )")])]),s._v(" "),n("p",[s._v("의 가장 효율적인 방법이 된다.")]),s._v(" "),n("h4",{attrs:{id:"approach-2-trie"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#approach-2-trie"}},[s._v("#")]),s._v(" Approach 2. Trie")]),s._v(" "),n("p",[s._v("예를들어 아래와 같은 단어들이 있다고 가정하자")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("words = [ coat, coffee, cat, car, chrome ]\n")])])]),n("p",[s._v("이를 트라이로 만들면 아래와 같이 된다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(358),alt:"example"}})]),s._v(" "),n("p",[s._v("따라서 가령 'co' 를 검색한다 하면 "),n("strong",[s._v("root 👉 c 👉 o 노드로 이동")]),s._v("하여 결과로 'coffee' 와 'coat' 를 찾아낼 수 있다.")]),s._v(" "),n("p",[s._v("이제 문제로 돌아가보자. 가장 먼저 노드는 아래와 같은 클래스로 정의해주었다.")]),s._v(" "),n("div",{staticClass:"language-JS line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TrieNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ⭐️ 자식 노드의 수")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("이때 count 는 자식의 수를 나타낸다. count 변수는 기본적인 Trie 구조에 직접 추가해준 변수인데,")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("fro?? 👉 frodo, front, frost\n")])])]),n("p",[s._v("우리의 목적은 fro?? 라는 문자열로 해당 3개의 문자를 찾아내야한다. 따라서 "),n("strong",[s._v("문자열의 자리수를 이용")]),s._v("하면 조금 더 빠르게 검색할 수 있다.")]),s._v(" "),n("p",[s._v("아래와 같이 문자열의 길이 length에 따라 서로 다른 trie를 만들어 준 뒤,")]),s._v(" "),n("p",[n("img",{attrs:{src:a(359),alt:"trie"}})]),s._v(" "),n("p",[s._v("fro?? 의 경우 fro 까지 탐색을 한뒤 해당 노드의 count 를 반환해주면 된다.")]),s._v(" "),n("p",[s._v("자 그럼 Trie 를 구현해보자. 필요한 함수는 트라이를 만드는 insert 함수, 문자열을 찾는 find 함수이다.")]),s._v(" "),n("div",{staticClass:"language-JS line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("insert")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("word"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" idx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("root")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("idx "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" word"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("idx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TrieNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" idx"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" idx"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("이 문제에 올 수 있는 queries 의 형태는 아래와 같다.")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("1. fro?? 👉 ? 가 뒤에 오는 경우\n2. ????o 👉 ? 가 앞에 오는 경우\n3. ?????? 👉 ?만 오는 경우\n")])])]),n("p",[s._v("2번 같은 경우 위와 같은 트라이 구조에서 검색이 불가능하다. 항상 search 는 문자열 앞에서 부터 또는 root 부터 하기 때문에 뒤에서 부터 "),n("strong",[s._v("거꾸로 검색")]),s._v("하는 트라이가 필요하다.")]),s._v(" "),n("p",[s._v("따라서 length 별로, forward 트라이 (type : true), backward 트라이 (type : false) 세 가지 조건을 고려하여 구현 하였다.")]),s._v(" "),n("p",[s._v("이때 backward 트라이에 문자열을 insert 할때, 길이 n의 문자열을 뒤집는데 필요한 시간 복잡도는 O ( n ) 이 된다. 이 문제에서 주어지는 문자열은 상당히 길기 때문에 이 시간 또한 줄여주기 위해\nsplit(), reverse(), join() 등의 함수를 이용하기보다 index와 length 를 이용하여 구현하였다.")]),s._v(" "),n("div",{staticClass:"language-JS line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("find")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("word"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" word"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" idx "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("idx "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" word"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("idx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        idx"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("find 함수의 경우 ? 를 제외한 문자열을 검색한 뒤 해당 노드의 count 를 반환하여 구현하였다.")]),s._v(" "),n("h3",{attrs:{id:"_3-어려웠던-점"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-어려웠던-점"}},[s._v("#")]),s._v(" 3. 어려웠던 점")]),s._v(" "),n("p",[s._v("트라이라는 자료구조를 몰랐기 때문에 기본적인 트라이를 구현하고 문제를 풀이하는 순서로 진행하여 꽤 오랜시간이 걸렸다.")]),s._v(" "),n("p",[s._v("하지만 문자열 관련된 문제는 나중에 언젠간 쓰일듯 하기 때문에 끝까지 풀이하여 성공,, 모든 테스트 케이스를 통과할땐, 짜릿하다 😖")]),s._v(" "),n("p",[s._v("이런 문제가 코딩 테스트에 나오면 풀이할 자신은 없지만 언제나 "),n("strong",[s._v("어떻게든 한번 풀어보는게 중요")]),s._v("한거 같다 (스터디 준일이형이 해준 말).")]),s._v(" "),n("h2",{attrs:{id:"징검다리-binary-search"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#징검다리-binary-search"}},[s._v("#")]),s._v(" 징검다리 - Binary Search")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://programmers.co.kr/learn/courses/30/lessons/43236",target:"_blank",rel:"noopener noreferrer"}},[s._v("문제링크"),n("OutboundLink")],1),s._v(" "),n("a",{attrs:{href:"https://github.com/DKU-STUDY/Algorithm/blob/master/programmers/%EB%82%9C%EC%9D%B4%EB%8F%84%EB%B3%84/level04.%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC/JeongShin.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("나의풀이"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"_1-문제정의-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-문제정의-2"}},[s._v("#")]),s._v(" 1. 문제정의")]),s._v(" "),n("p",[s._v("rocks 라는 바위의 위치를 나타내는 배열, distance 최대 거리, n 제거할 바위 수 세 개의 조건을 고려한다.")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("바위는 0 부터 distance 사이에 rocks 배열에 나타난 위치에 바위가 놓여져 있다.\n예를들어, rocks = [2, 11, 14, 17, 21], distance 는 25, n 은 2 라고 할때\n두 개의 바위를 정하여 제거 해야한다. 이때 2, 14 가 제거되면 바위들의 위치는\n[11, 17, 21]이 되고 사이 거리는 [11, 6, 4, 4]가 된다. 이때 거리의 최소 값 4를 구할 수 있다.\n")])])]),n("p",[s._v("이때 n개의 바위를 제거하여 각 바위들 사이 거리가 최소가 되도록하여 최소 거리를 구하는 문제.")]),s._v(" "),n("h3",{attrs:{id:"_2-풀이-코드-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-풀이-코드-2"}},[s._v("#")]),s._v(" 2. 풀이 & 코드")]),s._v(" "),n("p",[s._v("바위 사이에 거리는 1 ~ distance 사이 범위내에 존재한다. 즉, 바위 간격이 아무리 멀어도 distance 보단 작고, 아무리 가까워도 1보단 크다.")]),s._v(" "),n("p",[s._v("즉 우리가 구하려는 최소 거리 또한 1 ~ distance 사이 내에 존재한다. 이를 기반으로 이분탐색을 구현해보자.")]),s._v(" "),n("div",{staticClass:"language-JS line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("binSearch")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" distance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// some codes")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* some condition */")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            right "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("일단 기본적인 이분탐색 뼈대에서 mid 값은 우리가 구하려는 최소 거리가 된다.")]),s._v(" "),n("p",[s._v("따라서 some condition 에 오는 값은 "),n("strong",[s._v("최소 거리 mid 값이 n개의 바위 내에서 구해질 수 있는가")]),s._v("가 되야 한다. 말이 어렵다. 아래 예제를 보자.")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("Example 💁🏻‍♂️\n| 0 | 2 | 11 | 14 | 17 | 21 | 25 | 에서\nmid = 5, n = 2, removed = 0 (제거한 바위 수) 라고 가정하자.\n\n0 👉 2 사이의 거리는 5보다 작기 때문에 제거. removed = 1\n0 👉 11 사이의 거리 (2는 제거 되었기 때문에 고려 X) 는 5보다 크기 때문에 통과. removed = 1\n11 👉 14 사이의 거리는 5보다 작기 때문에 제거. removed = 2\n11 👉 17 사이의 거리는 (14는 제거 되었기 때문에 고려 X) 5보다 크기 때문에 통과.\n17 👉 21 사이 거리는 5보다 작기 때문에 제거. removed = 3\n이때 removed > n 이 되기 때문에 해가 될 수 없음.\n\n따라서 5 보다 더 작은 mid 값으로 이분탐색 진행\n")])])]),n("p",[s._v("즉, some codes 에서 현재 mid 값으로 n개 이내의 범위 내에서 제거하여 해를 구할 수 있는가를 따져서 구현해주면 된다.")]),s._v(" "),n("div",{staticClass:"language-JS line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("isPossible")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("removed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" curr "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" rocks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1) 현재 바위와 이전 바위 사이 거리를 구함")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" currDistance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2) 거리가 최소 거리보다 짧을 경우 제거 대상이 됨")]),s._v("\n        removed "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" currDistance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" min"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3) 현재 바위가 제거 될 경우 현재 기준 prev를 그대로 전달")]),s._v("\n        prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" currDistance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" min "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4) 제거한 바위 수가 n을 넘어가면 실패")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("removed "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("prev 바위를 설정하는게 다소 까다로운데")]),s._v(" "),n("ol",[n("li",[s._v("현재 바위 (curr) 가 제거 될 경우 현재 바위의 prev 가 그대로 다음 바위로 전달되어야 함")]),s._v(" "),n("li",[s._v("현재 바위가 제거되지 않을 경우 prev 가 현재 바위로 설정 되어야 함")])]),s._v(" "),n("p",[s._v("이 두 가지 경우를 잘 고려해주면 별 어려움 없이 해를 구할 수 있다.")]),s._v(" "),n("h3",{attrs:{id:"_3-어려웠던-점-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-어려웠던-점-2"}},[s._v("#")]),s._v(" 3. 어려웠던 점")]),s._v(" "),n("p",[s._v("이 문제는 이분탐색이라는 문제 카테고리를 알고 있었지만 한번에 풀이에 접근하지 못했다.")]),s._v(" "),n("p",[s._v("계속 linear search 를 해가면서 최소 거리 바위를 구하고 삭제하고 다음 최소 거리 바위를 구하고의 방법으로 접근하였다. 시간복잡도도 N * 제거할 바위 수 가 될 뿐더러 정확도에서도 제대로 된 결과를 얻지 못했다.")])])}),[],!1,null,null,null);t.default=r.exports}}]);