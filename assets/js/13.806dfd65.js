(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{372:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"ruby-on-rails"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ruby-on-rails"}},[s._v("#")]),s._v(" Ruby on Rails "),a("img",{attrs:{src:"https://img.icons8.com/color/48/000000/ruby-programming-language.png"}})]),s._v(" "),a("h3",{attrs:{id:"객체-생명-주기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체-생명-주기"}},[s._v("#")]),s._v(" 객체 생명 주기")]),s._v(" "),a("p",[s._v("레일즈 어플리케이션 실행중에 객체(데이터)는 항상 만들어지고, 갱신되고, 삭제된다. 이러한 객체 생명 주기 과정에서 hook 을 제공한다.")]),s._v(" "),a("p",[s._v("데이터 검증은 오직 유요한 데이터의 입력을 보장하기 위해서이다.")]),s._v(" "),a("p",[s._v("데이터 검증을 하기 위한 대책으로 여러가지 방법이 있을 수 있다. 다음 사항들을 고려 해보자.")]),s._v(" "),a("ul",[a("li",[s._v("데이터 베이스 내 제약 사항 혹은 저장 프로시저")])]),s._v(" "),a("p",[s._v("데이터 베이스 의존적인 데이터 검증 방법으로 단점은 테스트하고 관리하기가 어렵다. 하지만 mysql 등의 다른 데이터베이스 어플리케이션을 사용하게 된다면 데이터베이스 어플리케이션 레벨에서 제약 사항을 사용하는건 좋은 방법이다. 예를들어 자주 사용되는 테이블의 경우 키에 대한 제약사항이 있으면 유일성 검증을 안전하게 다룰 수 있다.")]),s._v(" "),a("ul",[a("li",[s._v("클라이언트 측 데이터 검증 👉 컨트롤러 수준, 모델 수준")])]),s._v(" "),a("ul",[a("li",[s._v("컨트롤러 수준")])]),s._v(" "),a("p",[s._v("컨트롤러 수준에서 데이터 검증은 테스트나 유지 보수가 다소 어렵다. 그리고 컨트롤러는 항상 가볍게 유지하는게 좋은 방법이다.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("모델 수준")])])]),s._v(" "),a("p",[s._v("모델 수준의 데이터 검증은 데이터베이스에 유효한 데이터만 입력 되도록 해야한다. 따라서 모델 레벨 데이터 검증은 1. 데이터베이스를 고려 (신뢰)하지 않고 2. 고객이 우회해서 접근도 못해야 한다. 이에 레일즈는 공통적인 요구사항에 대한 "),a("strong",[s._v("내장 헬퍼")]),s._v("를 제공한다.")]),s._v(" "),a("h4",{attrs:{id:"데이터-검증"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-검증"}},[s._v("#")]),s._v(" 데이터 검증")]),s._v(" "),a("p",[s._v("Active Record 객체는 두 종류가 있다. 데이터베이스 한 투플에 해당되는 것과 그렇지 않은것. new 생성자를 통하여 데이터를 생성한 데이터는 아직 데이터베이스 측면에선 유효하지 않다. save 를 호출하면 그때 하나의 투플이 된다. 아래 예제를 보자")]),s._v(" "),a("div",{staticClass:"language-rb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John Doe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("new_record"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("save "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("new_record"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("save 가 되기전에 데이터 검증을 통하여 객체가 데이터베이스에 저장되기전에 유효하지 않은 데이터에 대하여 INSERT, UPDATE 명령이 실행되지 않도록 규칙을 지정해야 한다.")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("Naming Convention")]),s._v(" "),a("p",[s._v("/articles route에 대한 작명 관습을 예로들어보면")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Model Name: article (단수)")]),s._v(" "),a("ul",[a("li",[s._v("File Name : article.rb")]),s._v(" "),a("li",[s._v("Class Name : Article (맨 앞글자만 대문자 + 낙타 표기법)")])])]),s._v(" "),a("li",[a("p",[s._v("Table Name: articles (복수)")])])]),s._v(" "),a("p",[s._v("만약 마이그레이션을 생성한다고 하면 다음과 같이 이후에 어떤 마이그레이션 생성을 하였는지 알아보기 쉽도록 작명 해야한다.")]),s._v(" "),a("p",[s._v("rails generate migration create_articles")])])])}),[],!1,null,null,null);t.default=n.exports}}]);