(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{396:function(t,e,a){"use strict";a.r(e);var n=a(42),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"데이터베이스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터베이스"}},[t._v("#")]),t._v(" 데이터베이스")]),t._v(" "),a("h2",{attrs:{id:"데이터베이스-기초"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터베이스-기초"}},[t._v("#")]),t._v(" 데이터베이스 기초")]),t._v(" "),a("h3",{attrs:{id:"데이터-모델-분류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-모델-분류"}},[t._v("#")]),t._v(" 데이터 모델 분류")]),t._v(" "),a("ul",[a("li",[t._v("관계형 데이터 모델")])]),t._v(" "),a("p",[t._v("관계형 데이터 모델은 테이블(릴레이션)의 형식으로 표현하는 확실한 이론적 기반과 간결한 표현형식으로 "),a("strong",[t._v("가장 많은 상용 DBMS가 사용")]),t._v("한다.")]),t._v(" "),a("ul",[a("li",[t._v("객체지향 데이터 모델")])]),t._v(" "),a("p",[t._v("데이터 구조가 복잡하여 관계형 모델이 부적당한 경우 데이터를 클래스 단위로 표현하여 상속, 캡슐화 등의 객체 지향 개념을상도입하고 있다.")]),t._v(" "),a("ul",[a("li",[t._v("계층형 데이터 모델")])]),t._v(" "),a("p",[t._v("데이터를 트리 구조로 표현하며 각 노드가 레코드가 된다.")]),t._v(" "),a("ul",[a("li",[t._v("네트워크 데이터 모델")])]),t._v(" "),a("p",[t._v("계층형을 보완한 모델로 트리가 아닌 그래프 형태로 표현한다.")]),t._v(" "),a("h3",{attrs:{id:"스키마와-인스턴스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#스키마와-인스턴스"}},[t._v("#")]),t._v(" 스키마와 인스턴스")]),t._v(" "),a("p",[a("code",[t._v("스키마")])]),t._v(" "),a("p",[t._v("👉 메타 데이터와 같은 의미로 데이터 베이스의 구조에 대한 정보를 의미한다. 대부분 데이터베이스 설계과정에서 정의되며 자주 변경되지 않는 특징을 가진다.")]),t._v(" "),a("p",[t._v("👉 스키마는 데이터 항목, 데이터 타입과 같은 구조와 데이터가 만족해야할 제약 조건까지 포함한다.")]),t._v(" "),a("p",[a("code",[t._v("인스턴스")])]),t._v(" "),a("p",[t._v("👉 스키마에 대한 실제 데이터를 인스턴스라 한다.")]),t._v(" "),a("h3",{attrs:{id:"스키마-아키텍처"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#스키마-아키텍처"}},[t._v("#")]),t._v(" 스키마 아키텍처")]),t._v(" "),a("ol",[a("li",[t._v("논리적 단계 : 논리적 스키마")])]),t._v(" "),a("p",[t._v("논리적 단계에서는 전체 데이터 베이스의 논리적 구조를 기술한다. 논리적 스키마는 논리적 데이터 모델을 사용하며 관계형 모델의 경우에는 데이터베이스 테이블들의 집합 및 제약조건들로 표현된다.")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("내부 단계 : 내부 스키마")])]),t._v(" "),a("p",[t._v("내부 단계에서는 데이터베이스의 물리적 구조를 기술한다. 데이터 저장 구조의 세부 사항과 데이터 접근 경로들을 기술한다.")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("외부 단계 : 외부 스키마")])]),t._v(" "),a("p",[t._v("사용자 뷰에 해당한다. 사용자가 관심을 갖는 데이터베이스의 부분을 기술하고 나머지는 숨긴다.")]),t._v(" "),a("h3",{attrs:{id:"데이터의-독립성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터의-독립성"}},[t._v("#")]),t._v(" 데이터의 독립성")]),t._v(" "),a("p",[t._v("3 단계 스키마 아키텍처를 통해 상위 스키마와 하위 스키마가 매핑을 통해 "),a("strong",[t._v("데이터의 독립성")]),t._v("을 제공할 수 있다.")]),t._v(" "),a("p",[a("code",[t._v("물리적 데이터 독립성")])]),t._v(" "),a("p",[t._v("논리적 스키마 또는 외부 스키마의 정의를 변경할 필요 없이 물리적 스키마를 수정할 수 있는 능력을 의미한다.")]),t._v(" "),a("p",[t._v("예를들어, 학사 DB에서 전공 별 학생들에 대한 데이터 검색이 빈번한 경우, 학생 테이블을 전공에 대해 정렬한든지 인덱스를 추가하여 논리적 스키마를 변경하지 않아도 성능을 향상시킬 수 있다.")]),t._v(" "),a("p",[a("code",[t._v("논리적 데이터 독립성")])]),t._v(" "),a("p",[t._v("외부 스키마의 정의를 변경할 필요 없이 논리적 스키마를 수정 할 수 있는 능력.")]),t._v(" "),a("p",[t._v("예를들어 학생 테이블의 경우 새로운 응용 프로그램의 개발을 위해 학년을 나타내는 속성을 추가한다고 기존 응용 프로그램은 수정할 필요가 없다.")]),t._v(" "),a("p",[a("code",[t._v("데이터 추상화")])]),t._v(" "),a("p",[t._v("응용 프로그램에서는 데이터의 물리적 구조나 상세한 내용은 알 필요가 없음. 따라서 추상화를 통해 필요한 데이터만 제공.")]),t._v(" "),a("h2",{attrs:{id:"트랜잭션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#트랜잭션"}},[t._v("#")]),t._v(" 트랜잭션")]),t._v(" "),a("p",[t._v("데이터베이스 시스템은 다수의 사용자에 대해서도 데이터에 대한 동시적 접근 상황에서 항상 데이터의 알관성이 유지되어야 하며 혹시나 발생하는 시스템 장애에도 데이터의 손실이 없어야 한다.")]),t._v(" "),a("p",[t._v("정의 👉 일련의 데이터베이스 연산들로 이루어진 논리적인 연산 단위")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("트랜잭션의 ACID 특징")]),t._v(" "),a("p",[t._v("A - Atomicity")]),t._v(" "),a("p",[t._v("All or Nothing, 즉, 모든 연산이 완전히 수행되든지 전혀 수행되지 않아야 한다.")]),t._v(" "),a("p",[t._v("C - Consistency")]),t._v(" "),a("p",[t._v("완료한 트랜잭션은 시스템 장애 발생 시에도 그 효과가 지속적이어야 함")]),t._v(" "),a("p",[t._v("I - Isolation")]),t._v(" "),a("p",[t._v("트랙잭션의 효과가 다른 트랜잭션의 영향으로부터 독립적이어야 함")]),t._v(" "),a("p",[t._v("D - Durability")])]),t._v(" "),a("p",[t._v("출처 : 단국대학교 소프트웨어학과 이석균 교수님 - 데이터 베이스 기초, 고급 데이터 베이스 자료내용")]),t._v(" "),a("h2",{attrs:{id:"무결성-제약-조건"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#무결성-제약-조건"}},[t._v("#")]),t._v(" 무결성 제약 조건")]),t._v(" "),a("h3",{attrs:{id:"무결성-제약-조건이란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#무결성-제약-조건이란"}},[t._v("#")]),t._v(" 무결성 제약 조건이란?")]),t._v(" "),a("p",[t._v("데이터베이스 스키마에 대하여 지정되는 조건으로 데이터베이스에 저장되는 데이터들이 반드시 만족해야 할 조건을 의미한다.")]),t._v(" "),a("p",[t._v("관계형 모델에서의 무결성 제약 조건")]),t._v(" "),a("p",[t._v("👉 도메인 제약 조건 - Domain Constraint")]),t._v(" "),a("p",[t._v("각 속성의 도메인을 지정하여 입력 오류 방지한다. SQL 은 다양한 타입을 제공하여 도메인 제약 조건을 지원한다.")]),t._v(" "),a("p",[t._v("하지만 가령 학생들의 성적 같은 경우 A, B, C, D, F 의 알파벳으로만 표현된다고 가정하면 다른 문자들이 오는걸 막아야 한다. 이러한 경우 아래와 같은 경우 "),a("strong",[t._v("check 절")]),t._v(" 을 활용할 수 있다.")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Course_Taken "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    grade "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("grade "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'F'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"키-제약-조건-key-constraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#키-제약-조건-key-constraint"}},[t._v("#")]),t._v(" 키 제약 조건 - Key Constraint")]),t._v(" "),a("p",[t._v("키(key)는 릴레이션의 투플을 유일하게 식별할 수 있는 속성을 의미한다. 키는 다음과 같은 특징을 가진다.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("유일성 (unqueness) 보장 : 릴레이션의 어떤 두 투플도 키를 구성하는 모든 속성에 대해 동일한 값을 가질 수 없다.")])]),t._v(" "),a("li",[a("p",[t._v("최소 집합 (minmal set) 요건 : 키를 구성하는 속성의 어떤 부분집합도 투플의 유일성을 보장하지 못한다.")]),t._v(" "),a("ul",[a("li",[t._v("Ex) 학과DB에서 {학번, 이름} 과 {학번} 이 두가지 case 모두 투플들의 유일성을 보장할 수 있다. 하지만 {학번, 이름}의 경우 최소집합 요건을 만족시키지 않는다.")])])])]),t._v(" "),a("h3",{attrs:{id:"키의-종류-및-조건"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#키의-종류-및-조건"}},[t._v("#")]),t._v(" 키의 종류 및 조건")]),t._v(" "),a("p",[t._v("Candidate Key 👉 단일 인스턴스를 유일하게 식별해주는 하나의 필드 또는 집합이다. 각 테이블은 적어도 하나의 후보키를 가져야만 한다.")]),t._v(" "),a("p",[t._v("Super Key 👉 릴레이션에서 유일성을 보장하는 속성은 모두 superkey 가 된다. 위에서 다루었던 { 학번 }, { 학번, 이름 } 모두 superkey 가 된다. 이때 주의할점은 모든 super key 가 primary key 가 되는건 아니다.")]),t._v(" "),a("p",[t._v("Primary Key 👉 후보키 중 하나의 키가 기본키가 되고 나머지는 후보키가 된다. Primary Key 절을 사용한다.")]),t._v(" "),a("p",[t._v("Alternate Key 👉 후보키 중 기본키를 제외한 키, Unique 절 사용")]),t._v(" "),a("p",[a("strong",[t._v("후보키 (기본키)의 요소")])]),t._v(" "),a("ul",[a("li",[t._v("유일한 값을 포함한다.")]),t._v(" "),a("li",[t._v("널 값을 포함할 수 없다.")]),t._v(" "),a("li",[t._v("보안이나 비밀을 깨틀리지 않는다. (주민등록번호 같은 값들은 후보 키로 부적합)")]),t._v(" "),a("li",[t._v("다중필드가 아니다.")]),t._v(" "),a("li",[t._v("아주 드물고 극단적인 경우에만 수정될 수 있다.")])]),t._v(" "),a("h3",{attrs:{id:"개체-무결성-제약조건-entity-integrity-constraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#개체-무결성-제약조건-entity-integrity-constraint"}},[t._v("#")]),t._v(" 개체 무결성 제약조건 - Entity Integrity Constraint")]),t._v(" "),a("p",[t._v("개체 무결성 제약조건은 "),a("strong",[t._v("기본키에는 NULL 이 올 수 없음")]),t._v("을 의미한다.")]),t._v(" "),a("p",[t._v("DB에서의 "),a("code",[t._v("NULL")]),t._v(" 의 개념")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Unknown 의 의미")]),t._v(" "),a("ul",[a("li",[t._v("아직 기록이 되지 않거나, 값이 존재하나 누락된 경우, 실제 존재하는지 여부를 모르는 경우 알려지지 않음의 의미로 NULL이 쓰인다.")])])]),t._v(" "),a("li",[a("p",[t._v("Inapplicable 의 의미")]),t._v(" "),a("ul",[a("li",[t._v("데이터 개체가 속성을 가질 수 없는 경우에 해당한다.")]),t._v(" "),a("li",[t._v("예를들어 대학교 수업 강사 또는 교수의 데이터에서 강사들의 경우 연구실이 없고 교수만 연구실이 있다고 가정하면 강사들은 연구실 필드에 널 값이 올 수 있다.")])])])]),t._v(" "),a("p",[t._v("기본 키에는 NOT NULL 절 사용")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Student "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 개체 무결성 제약조건 */")]),t._v("\n    ssn "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    major "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    gpa "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FLOAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ssn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 키 제약 조건, 후보키 제약 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 키 제약 조건, 기본키 제약 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h3",{attrs:{id:"외래키-제약조건-referential-integrity-constraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#외래키-제약조건-referential-integrity-constraint"}},[t._v("#")]),t._v(" 외래키 제약조건 - Referential Integrity Constraint")]),t._v(" "),a("p",[t._v("외래키는 "),a("strong",[t._v("다른 테이블의 기본키 값")]),t._v("을 가지는 속성을 의미한다.")]),t._v(" "),a("ul",[a("li",[t._v("자식 (child) 테이블 : 외래키를 포함하는 테이블")]),t._v(" "),a("li",[t._v("부모 (parent) 테이블 : 외래키가 가리키는 기본키를 갖는 테이블")])]),t._v(" "),a("p",[t._v("외래키 제약조건은 NULL 또는 외래키의 값과 같은 값을 기본키 값으로 갖는 투플이 부모 테이블에 존재해야 한다.")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Student "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    major "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ssn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("major"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Department"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("위의 예제의 경우 major (전공)은 department 테이블의 기본키인 id 값을 참조하게 되는 경우이다.")]),t._v(" "),a("p",[t._v("⭐️ "),a("strong",[t._v("외래키 제약 조건 위반 사례")])]),t._v(" "),a("ul",[a("li",[t._v("Department 에 없는 전공 값의 투플을 Student 에 입력할 때 👉 자식 테이블에서 위반 🙅🏻‍♂️")]),t._v(" "),a("li",[t._v("Student 에서 참조하는 전공의 투플을 Department 에서 삭제할 때 👉 부모 테이블에서 위반 🙅🏻‍♂️")]),t._v(" "),a("li",[t._v("Student 에서 참조하는 전공의 값을 Department 에서 변경 할 떄 👉 부모 테이블에서 위반 🙅🏻‍♂️")])]),t._v(" "),a("p",[t._v("2,3 번의 경우 부모 테이블에서 외래키 제약 조건을 위반하는 경우 "),a("strong",[t._v("DBMS 정책이")]),t._v(" 있다.")]),t._v(" "),a("ol",[a("li",[t._v("No Action : Parent 의 갱신 작업을 허용하지 않는다 (디폴트)")]),t._v(" "),a("li",[t._v("Set Null : Parent 의 갱신에 대해 Child의 외래키를 NULL로 설정")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Student "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("major"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Department"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("Set Default : Set NULL 과 유사함 NULL 대신 Default 값을 설정")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Cascade")]),t._v(" : DELETE 연산의 경우 부모 테이블로부터 튜플들이 삭제될 때 자식 테이블 중 이 튜플을 참조하는 값들을 "),a("strong",[t._v("연쇠적으로 삭제")]),t._v("한다. UPDATE 연산의 경우 자식 테이블의 외래키의 속성 값을 부모 테이블의 수정된 기본키의 속성 값으로 "),a("strong",[t._v("연쇄적으로 수정")]),t._v("한다.")])])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("major"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Department"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("ㅈ\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"정규화"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정규화"}},[t._v("#")]),t._v(" 정규화")]),t._v(" "),a("p",[t._v("관계형 데이터베이스의 설계과정에서 "),a("strong",[t._v("redundancy를 최소화")]),t._v(" 하고 데이터를 구조화 하는걸 정규화 (normalization) 이라고 한다.")]),t._v(" "),a("h3",{attrs:{id:"정규화를-해야하는-이유-⁉️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정규화를-해야하는-이유-⁉️"}},[t._v("#")]),t._v(" 정규화를 해야하는 이유 ⁉️")]),t._v(" "),a("p",[t._v("정규화를 전혀 고려하지 않은 데이터베이스의 경우 불필요한 데이터 중복이 발생 (redundancy) 할 수 있고 데이터 중복으로 인해 공간도 낭비될 뿐만아니라 "),a("code",[t._v("Anomaly")]),t._v(" 가 발생할 수 있다.")]),t._v(" "),a("p",[t._v("👉 Insertion Anomaly")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("id")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("강의명")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("담당 교수")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("신정웅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이석균 교수님")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("정익효")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이석균 교수님")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("지영본")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이석균 교수님")])])])]),t._v(" "),a("p",[t._v("위와 같은 데이터가 있다고 가정해보자. 이때 새로운 학생이 데이터베이스 수업에 추가되면 또 같은 값에 대한 Insertion 이 이루어 진다. 아직까진 그렇게 큰 문제가 아닐 수 있다.")]),t._v(" "),a("p",[t._v("👉 Deletion Anomaly")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("id")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("강의명")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("담당 교수")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("신정웅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이석균 교수님")])])])]),t._v(" "),a("p",[t._v("위의 데이터에서 지영본, 정익효 학생의 수강 내역이 삭제되었다고 가정해보자. 이때 마지막 남은 신정웅 학생의 수강내역 마저 삭제가 되면 데이터베이스 강의명과 담당교수에 대한 데이터가 아예 없어진다. 즉, 없는 수업이 되어 버린다.")]),t._v(" "),a("p",[t._v("데이터베이스에서 수강내역만을 삭제했을 뿐인데 강의에 대한 데이터까지 전부 삭제되는 불상사가 발생한 것이다.")]),t._v(" "),a("p",[t._v("👉 Updation Anomaly")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("id")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("강의명")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("담당 교수")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("신정웅")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("s",[t._v("이석균")]),t._v(" 우진운 교수님")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("정익효")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이석균 교수님")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("지영본")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("s",[t._v("이석균")]),t._v(" 우진운 교수님")])])])]),t._v(" "),a("p",[t._v("만약 위와 같이 데이터베이스 수업 담당 교수가 이석균 교수님에서 우진운 교수님으로 바뀌었다고 가정해보자.")]),t._v(" "),a("p",[t._v("그렇다면 중복된 이석균 교수님에 대한 모든 데이터가 다 update 되어야 한다. 만약 위와 같이 1개라도 제대로 update가 이루어지지 않으면 담당 교수는 이석균 교수님인지 우진운 교수님인지 혼돈에 휩싸일 수 있다.")]),t._v(" "),a("p",[t._v("데이터베이스 정규화는 단계별로 이루어진다. 하나씩 알아보자.")]),t._v(" "),a("h3",{attrs:{id:"_1nf-first-normal-form"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1nf-first-normal-form"}},[t._v("#")]),t._v(" 1NF - First Normal Form")]),t._v(" "),a("p",[t._v("1NF 혹은 First Normal Form 은 가장 기초적인 정규화 단계이다. 1NF 조차 지켜지지 않은 데이터베이스는 설계가 아주 잘못되었다고 볼 수 있다.")]),t._v(" "),a("p",[t._v("따라서 데이터베이스에서 모든 테이블은 "),a("strong",[t._v("최소한의 조건")]),t._v("으로 1NF는 항상 만족해야한다.")]),t._v(" "),a("p",[t._v("👉 Rule 1")]),t._v(" "),a("p",[t._v("모든 필드, 행은 "),a("strong",[t._v("atomic values")]),t._v(" 를 가져야 한다.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Col 1")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Col 2")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Col 3")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("A")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("X, Y")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Z")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("B")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("W")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("F")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("C")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("D")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("F")])])])]),t._v(" "),a("p",[t._v("위의 경우 X, Y 값을 동시에 가지기 때문에 위반 사례가 된다.")]),t._v(" "),a("p",[t._v("👉 Rule 2")]),t._v(" "),a("p",[t._v("모든 필드의 값들은 같은 타입을 가져야 한다.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("생일")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("성별")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("96-11-27")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("지영본")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("여")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("08-07-09")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("정익효")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("남")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("R")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이현수")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("남")])])])]),t._v(" "),a("p",[t._v("👉 Rule 3")]),t._v(" "),a("p",[t._v("모든 행들은 유니크한 Name (필드 명) 을 가져야 한다.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("생일")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름 ❌ 성 ⭕️")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("96-11-27")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("지")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("영본")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("08-07-09")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("정")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("익효")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("95-03-11")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("현수")])])])]),t._v(" "),a("p",[t._v("같은 한 테이블에 필드명을 가지게 되면 많은 혼란을 초래할 수 있다.")]),t._v(" "),a("h3",{attrs:{id:"_2nf-second-normal-form"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2nf-second-normal-form"}},[t._v("#")]),t._v(" 2NF - Second Normal Form")]),t._v(" "),a("p",[t._v("2NF 이해하기 위해서는 "),a("code",[t._v("partial dependency")]),t._v(" 에 대한 개념이 필요하다.")]),t._v(" "),a("p",[t._v("아래와 같은 테이블이 있닥고 가정해보자.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("학번")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("학과")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1324981")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("지영본")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("도예과")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("4358941")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("정익효")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("도예과")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1342818")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이현수")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("성악과")])])])]),t._v(" "),a("p",[t._v("이때 학번의 필드는 데이터를 Table에서 fetch 할때 해당 튜플을 유일하게 식별 가능하다.")]),t._v(" "),a("p",[t._v("예를들어 학번이 1324981인 학생의 학과를 조회할 때 학번으로 학생의 학과를 알아낼 수 있다.")]),t._v(" "),a("p",[t._v("따라서 다른 필드들 (이름, 학과) 이러한 필드 (학번, primary key)에 종속성을 가지게 된다. 이를 "),a("strong",[t._v("dependency")]),t._v(" 혹은 "),a("strong",[t._v("functional dependency")]),t._v(" 라고 말할 수 있다. 그렇다면 partial dependency 는 무엇일까?")]),t._v(" "),a("p",[t._v("Pratial Dependency 는 primary key 가 "),a("strong",[t._v("composite key, 즉, 두개 이상의 필드가 키로 쓰일때")]),t._v(" 발생할 수 있다.")]),t._v(" "),a("p",[t._v("다음과 같은 학생의 수강 내역을 저장하는 테이블이 있다고 가정하자.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("학번")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("이름")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("강의명")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("성적")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("담당 교수")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1324981")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("지영본")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("A+")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ㅇㅇㅇ 교수님")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("4358941")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("정익효")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("알고리즘")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("B+")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("XXX 교수님")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1342818")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이현수")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("F")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ㅇㅇㅇ 교수님")])])])]),t._v(" "),a("p",[t._v("이때 학번 + 강의명이 primary key 로 사용될 수 있다. 그렇다면 종속성을 따져보자.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("{학번, 강의명} 👉 성적\n학번 👉 이름\n강의명 👉 담당 교수\n")])])]),a("blockquote",[a("p",[t._v("따라서 담당교수 필드, 이름 필드 등은 primary key 에 대하여 부분적인 종속성, partial dependency 를 가지고 이는 2NF에 위반된다.")])]),t._v(" "),a("p",[t._v("2NF는 이러한 partial dependency 를 없애는걸 의미한다. {학번, 이름}에 대한 테이블, {학번, 강의명, 성적} 에 대한 테이블, {강의명, 담당교수} 에 대한 테이블로 분리해주어 모든 기본키가 아닌 필드는 기본키에 대해서 "),a("code",[t._v("full functional dependency")]),t._v(" 를 가지도록 설계해야 한다.")]),t._v(" "),a("h3",{attrs:{id:"_3nf-third-normal-form"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3nf-third-normal-form"}},[t._v("#")]),t._v(" 3NF - Third Normal Form")]),t._v(" "),a("p",[t._v("3rd Normal Form 은 "),a("code",[t._v("Transitive Dependency")]),t._v(" 을 이해해야 한다. 이는 2NF 에서 다루었던 Partial Dependency 와는 다른 개념이다.")]),t._v(" "),a("p",[t._v("3NF 은 2NF이고, 키가 아닌 모든 속성들은 기본 키에 이행적 종속이 되지 않아야 한다.")]),t._v(" "),a("p",[t._v("다음과 같은 필드들의 테이블이 있다고 가정하자.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("과목 번호")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("과목명")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("과목 설명")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("교수 ID")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("교수 이름")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("연구실")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CF5")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스 기초 수업")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("P-442")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이석균 교수님")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("S-401")])])])]),t._v(" "),a("p",[t._v("이때 종속성을 따져보자.")]),t._v(" "),a("p",[t._v("과목 번호 (기본 키) 에 과목명, 과목 설명, 교수 번호, 교수 이름, 연구실이 종속성을 가진다.")]),t._v(" "),a("p",[t._v("또한, 교수 번호 (키가 아닌 속성) 에 교수 이름, 연구실이 종속을 가진다.")]),t._v(" "),a("p",[t._v("즉, 연구실은 "),a("strong",[t._v("과목 번호 👉 교수 ID 👉 연구실")])]),t._v(" "),a("blockquote",[a("p",[t._v("A -> B 와 B -> C 이기 때문에 A -> C 라는 관계가 성립한다. 따라서 이러한 "),a("strong",[t._v("이행적 종속")]),t._v("성이 3NF 위반 사례에 해당된다.")])]),t._v(" "),a("p",[t._v("이는 교수 TABLE 과 과목 TABLE 을 분리하여 해결할 수 있다.")]),t._v(" "),a("h3",{attrs:{id:"bcnf-boyce-codd-normal-form"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bcnf-boyce-codd-normal-form"}},[t._v("#")]),t._v(" BCNF - Boyce-Codd Normal Form")]),t._v(" "),a("p",[t._v("BCNF를 다루기전에 이전 정규화 단계에 대해 빠르게 복습해보자.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("2NF - Partial Dependency")]),t._v(" "),a("ul",[a("li",[t._v("A 가 prime attribute, B가 non-prime attribute 일때,")]),t._v(" "),a("li",[t._v("AXY {후보키} 에 대하여 B 가 A 속성에 대하여 부분적으로 종속성을 가지면 위반")])])]),t._v(" "),a("li",[a("p",[t._v("3NF - Transitive Dependency")]),t._v(" "),a("ul",[a("li",[t._v("A 가 non-prime attr, B가 non-prime attr 일때,")]),t._v(" "),a("li",[t._v("A 👉 B 가 종속성을 가지면 이행적 종속성을 가지게 되어 위반")])]),t._v(" "),a("p",[t._v("의 내용을 다시 한번 이해하고 BCNF 로 들어가자")])])]),t._v(" "),a("p",[t._v("BCNF 는 다음 두가지 조건을 만족해야 한다.")]),t._v(" "),a("ol",[a("li",[t._v("3NF 를 만족해야 한다.")]),t._v(" "),a("li",[t._v("모든 필드에 대하여 A 👉B 의 관계에서 "),a("strong",[t._v("A 는 반드시 super key")]),t._v(" 이어야 한다.")])]),t._v(" "),a("p",[t._v("이에 따라 규칙 2를 위반하는 경우")]),t._v(" "),a("blockquote",[a("p",[t._v("A 👉B 의 관계에서 A 가 non-prime 이지만 B 가 prime attribute 일때 BCNF 위반 사례가 된다.")])]),t._v(" "),a("p",[t._v("아래와 같은 학생들의 수강 과목에 대한 테이블이 있다 가정해보자.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("학번")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("과목")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("담당 교수")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("32162174")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("데이터베이스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("이석균 교수님")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("32158320")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("글로벌 중국어")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("쯔위 교수님")])])])]),t._v(" "),a("p",[t._v("위의 경우 종속성을 따져보자.")]),t._v(" "),a("ol",[a("li",[t._v("{ 학번, 과목 } 👉 담당 교수")]),t._v(" "),a("li",[t._v("담당 교수 👉 과목")])]),t._v(" "),a("p",[t._v("두 가지 종속성에 대하여 두 종속성 모두 partial dependency, transitive dependency 가 없다.")]),t._v(" "),a("p",[t._v("하지만 BCNF 를 고려 해보면 "),a("strong",[t._v("담당교수 (non - prime) 👉  과목 (prime)")]),t._v(" 인 상황이다.")]),t._v(" "),a("p",[t._v("따라서 과목 속성이 super key가 아닌 속성에 의해 종속성을 가지고 있고 이는 BCNF 위반에 해당된다.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("학번")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("과목ID")])])]),t._v(" "),a("tbody")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("과목ID")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("담당 교수")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("과목명")])])]),t._v(" "),a("tbody")]),t._v(" "),a("p",[t._v("다음과 같이 2개의 테이블로 분리하고 과목 ID 속성을 참조하게 하여 BCNF를 만족시킬 수 있다.")]),t._v(" "),a("h3",{attrs:{id:"_4nf-fourth-normal-form"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4nf-fourth-normal-form"}},[t._v("#")]),t._v(" 4NF - Fourth Normal Form")]),t._v(" "),a("p",[t._v("4NF 는 "),a("code",[t._v("Multi-Valued Dependency")]),t._v(" 에 대한 내용을 다룬다.")]),t._v(" "),a("p",[t._v("Multi-Valued Dependency 는 다음 3가지 조건을 만족할때 해당 된다.")]),t._v(" "),a("ol",[a("li",[t._v("A 👉B 종속 관계에서 하나의 A 에 대하여 하나 이상의 B가 존재한다.")]),t._v(" "),a("li",[t._v("테이블은 3개 이상의 행으로 이루어져 있다.")]),t._v(" "),a("li",[t._v("3개의 속성을 A, B, C 라 가정했을 때, B와 C는 independent하다(관계가 없다).")])]),t._v(" "),a("p",[t._v("먼저 Single-valued Dependency 와 Multi-valued Dependency 에 대해 알아보자.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Single-valued (One-to-One) Dependency")]),t._v(" "),a("ul",[a("li",[t._v("x -> y 인 관계")]),t._v(" "),a("li",[t._v("예) 한명의 사람 (x) 은 하나의 주민등록번호 (y)를 가진다.")])])]),t._v(" "),a("li",[a("p",[t._v("Multi-valued (One-to-Many) Dependency")]),t._v(" "),a("ul",[a("li",[t._v("x ->> y 인 관계")]),t._v(" "),a("li",[t._v("예) 한 학생(x)이 한 학기 동안 여러과목(y)을 수강할 수 있다.")])])])]),t._v(" "),a("h3",{attrs:{id:"함수적-종속에-의한-바람직한-분할-⭐️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#함수적-종속에-의한-바람직한-분할-⭐️"}},[t._v("#")]),t._v(" 함수적 종속에 의한 바람직한 분할 ⭐️")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("무 손실 조인 분할 (lossless - join)")]),t._v(" "),a("ul",[a("li",[t._v("분할된 테이블을 다시 조인 했을때, 원래의 테이블이 그대로 복원되어야 한다.")])])]),t._v(" "),a("li",[a("p",[t._v("종속 유지 분할 (dependency preserving)")]),t._v(" "),a("ul",[a("li",[t._v("테이블을 분할한 결과로 생성된 테이블들을 원래 테이블이 가지고 있던 함수적 종속을 모두 가지도록 분할해야 한다.")]),t._v(" "),a("li",[t._v("제 3정규형의 DB 스키마를 설계할 수 있다.")])])])]),t._v(" "),a("p",[t._v("출처 : "),a("a",{attrs:{href:"https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EC%A0%95%EA%B7%9C%ED%99%94",target:"_blank",rel:"noopener noreferrer"}},[t._v("위키 피디아"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=mUtAPbb1ECM",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube : Studytonight"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);